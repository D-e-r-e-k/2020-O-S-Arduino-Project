/*
This sketch is for val11idating the concept
*/
#include <Servo.h>

// Servo with green wire
#define GSERVOREAD A0
int rawGServoPos = 0;
#define GSERVOWRITE 8
int estGServoPos = 0;
Servo GServo;

// Servo with purple wire
#define PSERVOREAD A1
int rawPServoPos = 0;
#define PSERVOWRITE 9
int estPServoPos = 0;
Servo PServo;

// Servo with blue wire
#define BSERVOREAD A5
int rawBServoPos = 0;
#define BSERVOWRITE 10
int estBServoPos = 0;
Servo BServo;

// Sampling frequency
#define SF 30
// Roughly enough mem for 600 Length
#define MAXRECORDLENGTH 550

unsigned char recordedGPos[MAXRECORDLENGTH] = { 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 65, 67, 71, 74, 78, 82, 85, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 86, 86, 85, 83, 81, 76, 72, 66, 62, 58, 55, 55, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 54, 54, 55, 54, 54, 55, 55, 54, 55, 55, 55, 55, 55, 58, 59, 62, 66, 72, 77, 81, 85, 89, 91, 91, 91, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 91, 88, 85, 80, 76, 71, 66, 63, 62, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 62, 63, 66, 70, 73, 77, 79, 83, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 83, 79, 76, 72, 66, 62, 59, 56, 55, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 52, 52, 52, 52, 52, 52, 53, 52, 52, 53, 53, 53, 52, 53, 52, 53, 53, 53, 52, 53, 52, 53, 53, 53, 53, 53, 53, 54, 56, 59, 63, 67, 71, 74, 78, 81, 85, 88, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 91, 91, 91, 90, 90, 90, 90, 90, 90, 90, 90, 87, 83, 79, 74, 72, 68, 65, 63, 63, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 63, 65, 69, 72, 76, 79, 82, 85, 86, 87, 87, 87, 87, 87, 87, 87, 87, 87, 85, 83, 79, 73, 66, 60, 55, 50, 47, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46 };
unsigned char recordedPPos[MAXRECORDLENGTH] = { 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 39, 41, 45, 50, 54, 58, 61, 65, 68, 70, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 69, 66, 62, 57, 52, 49, 47, 44, 42, 40, 37, 36, 35, 35, 34, 33, 33, 31, 31, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 33, 35, 38, 42, 46, 50, 53, 57, 60, 62, 64, 65, 67, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 67, 65, 64, 62, 59, 57, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 53, 53, 52, 51, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 47, 48, 48, 47, 47, 47, 47, 48, 48, 47, 47, 47, 47, 48, 48, 47, 48, 47, 48, 48, 48, 48, 47, 48, 48, 47, 47, 48, 48, 48, 47, 47, 48, 48, 47, 48, 48, 48, 47, 48, 48, 48, 47, 47, 47, 48, 48, 47, 48, 48, 47, 47, 47, 48, 48, 48, 50, 52, 54, 56, 59, 62, 63, 64, 64, 64, 64, 65, 66, 67, 67, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 67, 66, 65, 63, 59, 55, 52, 48, 45, 41, 38, 35, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31 };
unsigned char recordedBPos[MAXRECORDLENGTH] = { 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 97, 99, 102, 106, 111, 116, 121, 124, 127, 130, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 128, 126, 123, 121, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 121, 121, 122, 123, 126, 130, 135, 139, 143, 145, 147, 149, 150, 152, 152, 153, 154, 154, 154, 155, 154, 154, 154, 154, 154, 155, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 155, 154, 154, 154, 154, 154, 154, 153, 153, 151, 148, 145, 141, 137, 131, 127, 123, 121, 121, 120, 120, 120, 120, 119, 119, 118, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 118, 118, 118, 118, 118, 119, 119, 121, 122, 124, 126, 129, 131, 133, 134, 135, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 137, 137, 137, 139, 141, 144, 146, 148, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 150, 150, 149, 150, 149, 150, 149, 149, 149, 149, 149, 149, 149, 149, 150, 150, 149, 149, 149, 150, 149, 149, 150, 149, 149, 149, 150, 150, 149, 149, 149, 149, 149, 149, 149, 149, 150, 150, 150, 150, 151, 152, 154, 156, 159, 161, 162, 163, 163, 163, 163, 163, 163, 163, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 163, 163, 160, 156, 152, 147, 143, 141, 138, 135, 134, 134, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 134, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133 };

int recordLength = 0;

void setup() {
  Serial.begin(9600);

  pinMode(LED_BUILTIN, OUTPUT); // light when Recording

}


void loop() {
  //Record();
  Play();

  digitalWrite(LED_BUILTIN, HIGH);
  delay(5000);
  digitalWrite(LED_BUILTIN, LOW);
}

bool EndRecord() {
  return false;
}

void Record() {
  digitalWrite(LED_BUILTIN, HIGH);
  
  int i = 0;
  for (; i<MAXRECORDLENGTH && !EndRecord(); i++) {
    
    rawGServoPos = analogRead(GSERVOREAD);
    estGServoPos = map(rawGServoPos, 60, 550, 0, 180);
    recordedGPos[i] = estGServoPos;

    rawPServoPos = analogRead(PSERVOREAD);
    estPServoPos = map(rawPServoPos, 60, 550, 0, 180);
    recordedPPos[i] = estPServoPos;

    rawBServoPos = analogRead(BSERVOREAD);
    estBServoPos = map(rawBServoPos, 60, 550, 0, 180);
    recordedBPos[i] = estBServoPos;
    
    delay(1000/SF);
  }
  recordLength = i;

  PrintRecord(recordedGPos);
  PrintRecord(recordedPPos);
  PrintRecord(recordedBPos);
  Serial.print("\n");
  
  digitalWrite(LED_BUILTIN, LOW);
}

void PrintRecord(unsigned char r[]){
  Serial.print("{ ");
  for(int i=0; i< MAXRECORDLENGTH-1; i++) {
    Serial.print(r[i]);
    Serial.print(", ");
  }
  Serial.print(r[MAXRECORDLENGTH-1]);
  Serial.print(" }\n");
}

void Play() {
    
  GServo.attach(GSERVOWRITE);
  PServo.attach(PSERVOWRITE);
  BServo.attach(BSERVOWRITE);
  
  for (int i = 0; i<MAXRECORDLENGTH; i++) {
    
    GServo.write(recordedGPos[i]);
    PServo.write(recordedPPos[i]);
    BServo.write(recordedBPos[i]);
    
    delay(1000/SF);
  }
  
  GServo.detach();
  PServo.detach();
  BServo.detach();
}
